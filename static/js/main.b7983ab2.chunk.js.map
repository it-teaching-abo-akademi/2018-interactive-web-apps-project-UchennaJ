{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","portfolioList","count","value","show","n","i","b","_this2","localStorage","newArray1","JSON","parse","portfo","s","k","push","stringify","newArray","react_default","a","createElement","App_Portfolio","id","name","onClick","delPortFolio","setState","newList","alert","portfolioName","t","length","splice","j","event","target","context","addPortFolio","_this3","className","type","placeholder","onChange","handleChange","bind","React","Component","Portfolio","_this4","stockList","portName","portfolioQuantity","total","currency","countP","currencyValue","q","v","_this5","f","App_Stock","key","idStock","quantity","totalAmount","selected","selectStock","updateC","getTotalAmount","that","client","XMLHttpRequest","open","onreadystatechange","readyState","currencyChange","responseText","send","array","obj","temp","val","tot","addStock","stockName","stockQuantity","uniqueID","func","addArray","m","funcArray","counter","newValue","newTotal","stockInfo","getLatestValue","add","_this6","handleChangeN","handleChangeQ","stockInEuro","stockInDollar","width","removeSelected","Stock","_this7","toggleModal","isOpen","_this8","align","checked","App_Modal","stockname","onClose","Modal","_this9","data","startDate","endDate","minDateAvailable","maxDateAvailable","d","defineProperty","parseFloat","date","stockData","getStockData","_this10","style","position","top","bottom","left","right","backgroundColor","padding","borderRadius","maxWidth","minHeight","margin","handleChangeF","min","max","handleChangeS","LineChart","height","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","Line","stroke","activeDot","r","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7983ab2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport PropTypes from 'prop-types';\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            portfolioList: [], // Will contain lists of portfolios created\n            count: 0, //Assigns unique keys to portfolios\n            value: '',\n            show: false,\n        };\n\n    }\n    //add a portfolio with n (name), i (ID), and b (increment count)\n    addPortFolio(n,i,b){\n        if(b){ //add portfolio in localstorage\n            if (typeof localStorage[\"portfolioName\"] === 'undefined'){\n                var newArray1 = []; //New array of portfolio\n            }else{\n                newArray1 = JSON.parse(localStorage[\"portfolioName\"]); //get array of portfolio from the localStorage\n            }\n            var s = [] ;//stocks list\n            var k = 0; //countP\n            var portfo = {i,n,s,k};\n            newArray1.push(portfo);\n            localStorage[\"portfolioName\"] = JSON.stringify(newArray1);\n            localStorage[\"k\"] = this.state.count + 1\n        }\n\n        var newArray = this.state.portfolioList;\n        newArray.push(<Portfolio id={i} name={n} onClick={() => this.delPortFolio(i)}/>);\n        this.setState({portfolioList:newArray});\n        var newCount = this.state.count;\n        const newList = newCount +1;\n        this.setState({count:newList});\n        this.setState({show:false})\n    }\n\n    //Delete a portfolio using the ID key (i) and deleting it from the localstorage\n    delPortFolio(i){\n        alert(\"The portfolio will now be deleted\");\n        var portfolioName = JSON.parse(localStorage[\"portfolioName\"]);\n        for (var t = 0; t < portfolioName.length; t++) {\n            if( portfolioName[t].i === i){\n                portfolioName.splice(t,1)\n            }\n        }\n        localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n\n\n        var newArray = this.state.portfolioList;\n        for (var j = 0; j < newArray.length; j++) {\n            if(newArray[j].props.id === i){\n                newArray.splice(j,1)\n            }\n        }\n        this.setState({portfolioList:newArray})\n    }\n\n    //Input name of portfolio\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    componentWillMount(){\n        if(localStorage[\"k\"]){\n            var context = JSON.parse(localStorage[\"k\"]);\n            this.setState({count:context})\n        }\n    }\n\n    componentDidMount(){\n        if(localStorage[\"portfolioName\"] && localStorage[\"k\"]){\n            var portfolioName = JSON.parse(localStorage[\"portfolioName\"]);\n\n            for (var portfo in portfolioName) {\n                //add all already existing portfolio from the local storage\n                this.addPortFolio(portfolioName[portfo].n,portfolioName[portfo].i,false)\n            }\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"Header\">\n                    <div className={\"Header-title\"}>\n                        <span>Stock Portfolio Management System</span>\n                    </div>\n                </div>\n                {/* maximum number of portfolio is 10 */}\n                {this.state.portfolioList.length < 10 &&\n                <button type=\"button\" className=\"AddPortfolioBtn\"\n                        onClick={() => this.setState({show:true}) }> Add new Portfolio </button>}\n                {/* input text only shown when adding a new portfolio*/}\n                {this.state.show &&\n                <div>\n                    <input type=\"text\" placeholder=\"Portfolio name\" value={this.state.value}\n                           onChange={this.handleChange.bind(this)} />\n                    <button onClick={() => this.addPortFolio(this.state.value,this.state.count,true)}>Validate</button>\n                </div>\n                }\n\n                <div className={\"Spacer\"}/>\n                <div className=\"Portfolio_container col-11 col-m-11 clearfix\">\n                    {this.state.portfolioList}\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nclass Portfolio extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: null, //id of the portfolio\n            name: null, //name of portfolio\n            stockList: [], //list of stocks\n            portName: '', //input text for the stock name\n            portfolioQuantity: '', //input text for the stock quantity\n            total: 0, //total amount of money in the portfolio\n            currency: \"$\", //current currency displayed\n            countP: 0, //local counter that has stock unique key\n            show: false, //boolean not to show the input stock name and quantity\n            currencyValue: null, //current currency change from $ to €\n        };\n    }\n\n    //Adding the stocks to the stockList (n:name, q:quantity, v:value, t:totalAmount) and with a unique key\n    addStock(n,q,v,t,a){\n        var newArray = a;\n        if(this.state.currency === \"€\"){\n            v = v * this.state.currencyValue;\n            t = v * q\n        }\n        var f = this.state.countP;\n        newArray.push(<Stock key={this.state.countP} idStock={this.state.countP} name={n} quantity={q} value={v}\n                             totalAmount={t} selected={false} onChange={() => this.selectStock(f)}/>);\n        this.updateC();\n        this.setState({stockList:newArray}, function() {\n            var k = this.state.countP;\n            const newList = k +1;\n            this.setState({countP:newList});\n            this.getTotalAmount()\n        })\n    }\n\n    //Adding stocks to the array using the keys\n    //a:array, k:key, n:name, q:quantity, v:value, t:totalAmount, s:selected, that:this\n    //used in loops to avoid function in a loop warning\n    addArray(a,k,n,q,v,t,s,that){\n        return function(){\n            a.push(<Stock key={k} idStock={k} name={n} quantity={q} value={v} totalAmount={t}\n                          selected={s} onChange={() => that.selectStock(k)}/>)\n        }\n    }\n\n    //https request to get the latest currency change\n    getLatestValue(){\n        var that = this;\n        var client = new XMLHttpRequest();\n        client.open(\"GET\",\n            \"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=8EJF6T5NRPCXT944\", true);\n        client.onreadystatechange = function() {\n            if(client.readyState === 4) {\n                var obj = JSON.parse(client.responseText);\n                var currencyChange = obj[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"];\n                that.setState({currencyValue:currencyChange})\n            }\n        };\n        client.send();\n    }\n\n    //http request to add a stock. n: stock name.\n    //get the current value in $ and calculate the total value using q:quantity\n    add(n,q,a,b){\n        this.setState({show:false});\n        var that = this;\n        var array = a;\n        var client = new XMLHttpRequest();\n        client.open(\"GET\",\n            \"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=\" + n +\n            \"&interval=1min&apikey=8EJF6T5NRPCXT944\", true);\n        client.onreadystatechange = function() {\n            if(client.readyState === 4) {\n                var obj = JSON.parse(client.responseText);\n                var count = 0;\n                var t;\n                for (t in obj){\n                    if (count === 1) {\n                        var temp = obj[t]\n                    }\n                    count++\n                }\n                count = 0;\n\n                for (t in temp){\n                    if(count === 0){\n                        const val = temp[t][\"4. close\"];\n                        const tot = val * q;\n                        that.addStock(n,q,val,tot,array);\n\n\n                        if(b){ //add the stock to the corresponding portfolio in the local storage\n                            var portfolioName = JSON.parse(localStorage[\"portfolioName\"]);\n                            for( var portfo in portfolioName){\n                                if(portfolioName[portfo].i === that.props.id){\n                                    var stockName = n;\n                                    var stockQuantity = q;\n                                    portfolioName[portfo].s.push({stockName,stockQuantity})\n                                }\n                            }\n                            localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n                        }\n\n\n                    }count++\n                }\n                count =0\n            }\n        };\n        client.send();\n    }\n\n    //Input stock name\n    handleChangeN(event) {\n        this.setState({portName: event.target.value});\n    }\n    //Input stock quantity\n    handleChangeQ(event) {\n        this.setState({portfolioQuantity: event.target.value});\n    }\n\n    //Selecting a stock in a list using the unique ID\n    selectStock(uniqueID){\n        var func;\n        var newArray = this.state.stockList;\n        var j;\n        for (var i = 0; i < this.state.stockList.length; i++) {\n            if(this.state.stockList[i].props.idStock === uniqueID){\n                //if the stock is found, a new one with the same attributes except its selected attribute is added in the stock list\n                func = this.addArray(newArray,this.state.countP,this.state.stockList[i].props.name,\n                    this.state.stockList[i].props.quantity,\n                    this.state.stockList[i].props.value,this.state.stockList[i].props.totalAmount,\n                    !this.state.stockList[i].props.selected,this);\n                j=i\n            }\n        }\n        func();//call the addArray function after the loop\n        newArray.splice(j,1);//delete the old stock\n        this.setState({stockList:newArray});\n        var k = this.state.countP;\n        const newList = k +1;\n        this.setState({countP:newList});\n        this.getTotalAmount();\n        var portfolioName = JSON.parse(localStorage[\"portfolioName\"]); //Array request from the local storage\n        for( var m = 0; m < portfolioName.length; m++){\n            if(portfolioName[m].i === this.props.id){\n                portfolioName[m].k++\n            }\n        }\n        localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n    }\n\n    //Remove selected stock from portfolio\n    removeSelected(){\n        alert(\"The selected stock will be removed now\");\n        var funcArray =[]; //array of function\n        var newArray = [] ;//new stock list\n        var counter = this.state.countP;\n        for (var i = 0; i < this.state.stockList.length; i++) {\n            if(!this.state.stockList[i].props.selected){\n                //each stock is pushed in a newArray if it is not selected\n                funcArray.push(this.addArray(newArray,counter,this.state.stockList[i].props.name,this.state.stockList[i].props.quantity,\n                    this.state.stockList[i].props.value,this.state.stockList[i].props.totalAmount,\n                    this.state.stockList[i].props.selected,this))\n            }else{\n                var portfolioName = JSON.parse(localStorage[\"portfolioName\"]); //get array of portfolio from the localStorage\n                for( var m = 0; m < portfolioName.length; m++){\n                    if(portfolioName[m].i === this.props.id){\n                        for(var t = 0; t < portfolioName[m].s.length; t++){\n                            if(portfolioName[m].s[t].stockName === this.state.stockList[i].props.name &&\n                                portfolioName[m].s[t].stockQuantity === this.state.stockList[i].props.quantity){\n                                //delete selected stocks from the localstorage\n                                portfolioName[m].s.splice(t,1)\n                            }\n                        }\n                    }\n                }\n                localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n            }\n            counter++\n        }\n        for (var j = 0; j < funcArray.length; j++) {\n            funcArray[j]() //call all the addArray calls of the previous loop\n        }\n        this.updateC();\n        this.setState({stockList:newArray},function(){\n            this.setState({countP:counter});\n            this.getTotalAmount()\n        })\n    }\n\n    //Stock values and total stock changes to dollars\n    stockInDollar(){\n        if(this.state.currency === \"€\"){\n            this.setState({currency:\"$\"});\n            var counter = this.state.countP;\n            var newArray = [];\n            var funcArray =[];\n            for (var i = 0; i < this.state.stockList.length; i++) {\n                var newValue = this.state.stockList[i].props.value / this.state.currencyValue;\n                var newTotal = newValue * this.state.stockList[i].props.quantity;\n                funcArray.push(this.addArray(newArray,counter,this.state.stockList[i].props.name,\n                    this.state.stockList[i].props.quantity,newValue,newTotal,this.state.stockList[i].props.selected,this));\n                counter++\n            }\n            for (var t = 0; t < funcArray.length; t++) {\n                funcArray[t]()\n            }\n            this.updateC();\n            this.setState({stockList:newArray},function(){\n                this.setState({countP:counter});\n                this.getTotalAmount()\n            })\n        }\n    }\n\n    //Stock values and total stock changes to euros\n    stockInEuro(){\n        if(this.state.currency === \"$\"){\n            this.setState({currency:\"€\"});\n            var counter = this.state.countP;\n            var newArray = []; //new stocks list\n            var funcArray =[]; //array of functions\n            for (var i = 0; i < this.state.stockList.length; i++) {\n                var newValue = this.state.stockList[i].props.value * this.state.currencyValue ;//new value (calculated with currency change)\n                var newTotal = newValue * this.state.stockList[i].props.quantity; //newTotal value\n                funcArray.push(this.addArray(newArray,counter,this.state.stockList[i].props.name,\n                    this.state.stockList[i].props.quantity,newValue,newTotal,this.state.stockList[i].props.selected,this));\n                counter++\n            }\n            for (var t = 0; t < funcArray.length; t++) {\n                funcArray[t]()\n            }\n            this.updateC();\n            this.setState({stockList:newArray},function(){\n                this.setState({countP:counter});\n                this.getTotalAmount()\n            })\n        }\n    }\n\n    //update countP in the localStorage\n    updateC() {\n        var portfolioName = JSON.parse(localStorage[\"portfolioName\"]);\n        for( var m = 0; m < portfolioName.length; m++){\n            if(portfolioName[m].i === this.props.id){\n                portfolioName[m].k ++\n            }\n        }\n        localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n    }\n\n    //Update the total amount of the portfolio from the total amount of stocks\n    getTotalAmount(){\n        var stockInfo=0;\n        for (var i = 0; i < this.state.stockList.length; i++) {\n            stockInfo = stockInfo + this.state.stockList[i].props.totalAmount\n        }\n        this.setState({total:stockInfo})\n    }\n\n    componentWillMount(){\n        var portfolioName = JSON.parse(localStorage[\"portfolioName\"]);\n        for( var m = 0; m < portfolioName.length; m++){\n            if(portfolioName[m].i === this.props.id){\n                //set countP to the countP of the localstorage\n                this.setState({countP:portfolioName[m].k})\n            }\n        }\n        localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n    }\n\n    componentDidMount(){\n        this.getLatestValue(); //get currency change when mounting\n\n        var portfolioName = JSON.parse(localStorage[\"portfolioName\"]); //get array of requests from the localStorage\n        for( var m = 0; m < portfolioName.length; m++){\n            if(portfolioName[m].i === this.props.id){\n                for(var t = 0; t < portfolioName[m].s.length; t++){\n                    //add all the stocks from the corresponding portfolio from the localstorage\n                    this.add(portfolioName[m].s[t].stockName,portfolioName[m].s[t].stockQuantity,this.state.stockList,false)\n                }\n            }\n        }\n        localStorage[\"portfolioName\"] = JSON.stringify(portfolioName);\n    }\n\n\n    render() {\n        return (\n            <div className=\"Portfolio col- col-5 col-m-11\">\n                <div className=\"Portfolio-inner\">\n                    <span   className=\"Portfolio-title col- col-5 col-m-11\">{this.props.name}</span>\n\n                {/* input text and quantity only shown when adding a new stock*/}\n                {this.state.show &&\n                <div >\n                    <input type=\"text\" placeholder=\"Stock name\" value={this.state.portName}\n                           onChange={this.handleChangeN.bind(this)} />\n                    <input type=\"text\" placeholder=\"Quantity\" value={this.state.portfolioQuantity}\n                           onChange={this.handleChangeQ.bind(this)} />\n                    <button onClick={() => this.add(this.state.portName,this.state.portfolioQuantity,\n                        this.state.stockList,true)}>Validate</button>\n                </div>\n                }\n\n                <div className=\"portfolio-btn\">\n                <button className=\"portfolio-euro\" onClick={() => this.stockInEuro()}>Show in €</button>\n                <button className=\"portfolio-dollar\" onClick={() => this.stockInDollar()}>Show in $</button>\n                <button className=\"portfolio-deleteBtn\" onClick={() => this.props.onClick(this.props.id)}>X</button>\n                 <br/>\n                </div>\n\n                <div className=\"Portfolio-content\">\n                <table width=\"500\">\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Unit value</th>\n                        <th>Quantity</th>\n                        <th>Total value</th>\n                        <th>Select</th>\n                        <th>Perf Graph</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.stockList}\n                    </tbody>\n                </table>\n                </div>\n                <div>Total value of {this.props.name} : {this.state.total} {this.state.currency}</div><br/>\n                {this.state.stockList.length < 50 &&\n                <button onClick={() => this.setState({show:true})}>Add stock</button>}\n                <button onClick={() => this.removeSelected()}>Remove selected</button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nclass Stock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: null,\n            idStock: null,\n            totalAmount: 0,\n            quantity: 0,\n            value: 0,\n            selected: false,\n            isOpen: false, //open modal\n        };\n    }\n\n    //open the modal\n    toggleModal = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n\n\n    render() {\n        return (\n            <tr >\n                <td align= \"center\">{this.props.name}</td>\n                <td align= \"center\">{this.props.value}</td>\n                <td align= \"center\">{this.props.quantity}</td>\n                <td align= \"center\">{this.props.totalAmount}</td>\n                {/* checkbox to select and unselect this stock */}\n                <td align= \"center\"><input type=\"checkbox\" checked={this.props.selected}\n                                           onChange={() => this.props.onChange(this.props.idStock)}/></td>\n                <td align= \"center\"><button onClick={() => this.toggleModal()}>Graph</button></td>\n                {/* Modal component */}\n                <Modal stockname={this.props.name} show={this.state.isOpen}\n                       onClose={this.toggleModal}>\n                </Modal>\n\n            </tr>\n\n        );\n    }\n}\n\n// Modal class that plot values over time of the stock\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [], //data that goes to the graph\n            startDate: '',\n            endDate: '',\n            stockname: null,\n            minDateAvailable: null, //oldest date available\n            maxDateAvailable: null, //newest date available\n        };\n    }\n\n    //v:values array d:dates array which goes to the graph\n    stockData(v,d){\n        var stockInfo = [];\n        this.setState({minDateAvailable:d[d.length-1]}); //last date of the dates array\n        this.setState({maxDateAvailable:d[0]});//first date of the dates array\n\n        var f = d.length-1;\n        var s = 0;\n\n        if(this.state.startDate !== null && this.state.endDate !== null){\n            for (var i = v.length-1; i >= 0; i--) {\n                if(d[i] === this.state.startDate){\n                    f = i //first date index\n                }\n                if(d[i] === this.state.endDate){\n                    s = i //second date index\n                }\n            }\n        }\n        for (i = f; i >= s; i--) {\n            //push (date,value) in stock Info array\n            stockInfo.push({name: d[i], [this.props.stockname]:parseFloat(v[i])})\n        }\n\n        this.setState({data:stockInfo})\n    }\n\n\n    //daily value of the stock\n    getStockData() {\n        this.setState({show:false});\n        var client = new XMLHttpRequest();\n        var that = this;\n\n        client.open(\"GET\",\n            \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\" + this.props.stockname +\n            \"&apikey=8EJF6T5NRPCXT944\", true);\n        client.onreadystatechange = function() {\n            if(client.readyState === 4) {\n                var obj = JSON.parse(client.responseText);\n                var count = 0;\n                var t;\n                for (t in obj){\n                    if (count === 1) {\n                        var temp = obj[t]\n                    }\n                    count++\n                }\n                count = 0;\n\n                var date = []; //date array\n                var stockInfo = [];  //value array\n                for (t in temp){\n                    const val = temp[t][\"4. close\"];\n                    stockInfo.push(val);\n                    date.push(t);\n                    count++\n                }\n                count =0;\n                that.stockData(stockInfo,date)\n            }\n        };\n        client.send();\n    }\n\n    //start date input\n    handleChangeF(event) {\n        this.setState({startDate: event.target.value});\n    }\n\n    //End date input\n    handleChangeS(event) {\n        this.setState({endDate: event.target.value});\n    }\n\n    componentDidMount(){\n        this.getStockData()\n    }\n\n    render() {\n        // Render nothing if the \"show\" prop is false\n        if (!this.props.show) {\n            return null;\n        }\n\n\n        // The modal window\n        const modalStyle = {\n            backgroundColor: '#fff',\n            borderRadius: 5,\n            maxWidth: 1500,\n            minHeight: 600,\n            margin: '0 auto',\n            padding: 30\n        };\n\n        // Graph background\n        const backdropStyle = {\n            position: 'fixed',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            backgroundColor: 'rgba(0,0,0,0.3)',\n            padding: 50\n        };\n\n        return (\n            <div className=\"backdrop\" style={backdropStyle}>\n                <div className=\"modal\" style={modalStyle}>\n                    <input type=\"date\" name=\"bday\" value={this.state.startDate} onChange={this.handleChangeF.bind(this)}\n                           min={this.state.minDateAvailable} max={this.state.maxDateAvailable}/>\n                    <input type=\"date\" name=\"bday\" value={this.state.endDate} onChange={this.handleChangeS.bind(this)}\n                           min={this.state.minDateAvailable} max={this.state.maxDateAvailable}/>\n\n                    <button className=\"plotBtn\" onClick={() => this.getStockData()}> Plot </button>\n                    <br/>\n                    <br/>\n\n                    <div className=\"GraphWindow\">\n                        <LineChart width={1000} height={550} data={this.state.data}\n                                   margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n                            <XAxis dataKey=\"name\"/>\n                            <YAxis/>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <Tooltip/>\n                            <Legend />\n                            <Line type=\"monotone\" dataKey={this.props.stockname} stroke=\"#8884d8\" activeDot={{r: 8}}/>\n                        </LineChart>\n                    </div>\n                    <div className=\"footer\">\n                        <button className=\"close\" onClick={this.props.onClose}>\n                            Close\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\nModal.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    show: PropTypes.bool,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}